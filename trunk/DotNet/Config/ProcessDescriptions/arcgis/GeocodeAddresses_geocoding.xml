<?xml version="1.0"?><metadata><Esri><MetaID SYNC="true" /><CreaDate SYNC="true" /><CreaTime SYNC="true" /><SyncOnce SYNC="true">TRUE</SyncOnce><ModDate SYNC="true" /><ModTime SYNC="true" /></Esri><dataIdInfo><idCitation><resTitle sync="true">Geocode Addresses (Geocoding)</resTitle><citRespParty><rpIndName /><rpOrgName>ESRI, Inc.</rpOrgName><rpPosName /><rpCntInfo><cntAddress><delPoint>380 New York Street</delPoint><city>Redlands</city><adminArea>California</adminArea><postCode>92373 - 8100</postCode><eMailAdd>info@esri.com</eMailAdd><country>United States</country></cntAddress><cntPhone><voiceNum>909-793-2853</voiceNum><faxNum>909-793-5953</faxNum></cntPhone></rpCntInfo><role><RoleCd>010</RoleCd></role></citRespParty></idCitation><idAbs>
			<para>Geocodes a table of addresses.  This process requires a table that stores the addresses you want to geocode and an address locator or a composite address locator. This  tool matches the addresses against the address locator and saves the result for each input record  in a new point feature class.  </para>
		</idAbs><descKeys KeyTypCd="005"><keyTyp><keyTyp>005</keyTyp></keyTyp><keyword>Address</keyword><keyword>Address Locator</keyword><keyword>Address Matching</keyword><keyword>Batch</keyword><keyword>Candidates</keyword><keyword>Convert</keyword><keyword>Dynamic</keyword><keyword>End Offset</keyword><keyword>Geocode</keyword><keyword>Geocoded Feature Class</keyword><keyword>Geocoding</keyword><keyword>Intersection</keyword><keyword>Loc</keyword><keyword>Location</keyword><keyword>Locator</keyword><keyword>Lox</keyword><keyword>Map Points</keyword><keyword>Match Rate</keyword><keyword>Match Result</keyword><keyword>Match_Addr</keyword><keyword>Matching</keyword><keyword>Score</keyword><keyword>Side Offset</keyword><keyword>Spatial Description</keyword><keyword>Status</keyword><keyword>Street Intersection</keyword><keyword>Table Of Addresses</keyword><keyword>Xy Coordinates</keyword></descKeys></dataIdInfo><distInfo><distributor><distorFormat><formatName sync="true">ArcToolBox Tool</formatName></distorFormat><distorTran><onLineSrc><linkage /><protocol /><onFunct><onFunctCd /></onFunct></onLineSrc></distorTran></distributor></distInfo><metainfo><metd Sync="TRUE" /></metainfo><mdDateSt Sync="TRUE" /><tool name="GeocodeAddresses" displayname="Geocode Addresses (Geocoding)" toolboxalias="geocoding" softwarerestriction="none"><summary>
			<para>Geocodes a table of addresses.  This process requires a table that stores the addresses you want to geocode and an address locator or a composite address locator. This  tool matches the addresses against the address locator and saves the result for each input record  in a new point feature class.  </para>
		</summary><alink_name>GeocodeAddresses_geocoding</alink_name><toolIllust type="illustration" src="GeocodeAddresses_geocoding_h.png" alt="Geocode a table of addresses" /><parameters><param sync="true" name="in_table" displayname="Input Table" datatype="Table View" direction="Input" expression="in_table" type="Required"><pythonReference>
						<para>The table of addresses to geocode.</para>
					</pythonReference><dialogReference>
						<para>The table of addresses to geocode.</para>
					</dialogReference></param><param sync="true" name="address_locator" displayname="Input Address Locator" datatype="Address Locator" direction="Input" expression="address_locator" type="Required"><pythonReference>
						<para>The address locator to use to geocode the table of addresses.</para>
					</pythonReference><dialogReference>
						<para>The address locator to use to geocode the table of addresses.</para>
					</dialogReference></param><param sync="true" name="in_address_fields" displayname="Input Address Fields" datatype="Field Info" direction="Input" expression="in_address_fields" type="Required"><pythonReference>
						<para>The mapping of address fields used by the address locator to fields in the input table of addresses. </para>
						<para>Each field mapping in this parameter is in the format &lt;input address field&gt; &lt;table field name&gt;  where &lt;input address field&gt; is the name of the input address field used by the address locator, and &lt;table field name&gt; is the name of the corresponding field in the table of addresses.</para>
						<para>If you choose not to map an optional input address field used by the address locator to a field in the input table of addresses, specify that there is no mapping by using "&lt;None&gt;" in place of a field name.</para>
						<para>To determine the alias name for a reference data field used by a locator style, open the Create Address Locator tool and choose the locator style. The name that appears in the Field Name column of the Field Map section is the field's alias name.</para>
					</pythonReference><dialogReference>
						<para>The mapping of address fields used by the address locator to fields in the input table of addresses. </para>
					</dialogReference></param><param sync="true" name="out_feature_class" displayname="Output Feature Class" datatype="Feature Class" direction="Output" expression="out_feature_class" type="Required"><pythonReference>
						<para>The output geocoded feature class or shapefile.</para>
					</pythonReference><dialogReference>
						<para>The output geocoded feature class or shapefile.</para>
					</dialogReference></param><param sync="true" name="out_relationship_type" displayname="Dynamic Output Feature Class" datatype="Boolean" direction="Input" expression="out_relationship_type" type="Optional"><pythonReference>
						<para>Indicates whether to create a static copy of the address table inside the geocoded feature class or to create a dynamically updated geocoded feature class.</para>
						<bulletList><bullet_item>STATIC—Creates a static copy of the fields input address table in the output feature class. This is the default. </bullet_item><bullet_item>DYNAMIC—Creates a relationship class between the input address table and output feature class so that edits to the addresses in the input address table are automatically updated in the output feature class. This option is supported only if the input address table and output feature class are in the same geodatabase workspace. <para>This option is only supported if you have  ArcEditor or ArcInfo licences. An error message saying "Geocode addresses failed" will be displayed if you do not have the proper license.</para></bullet_item></bulletList>
					</pythonReference><dialogReference>
						<para>Indicates whether to create a static copy of the address table inside the geocoded feature class, or to create a dynamically updated geocoded feature class.</para>
						<bulletList>
							<bullet_item>Unchecked—Creates a static copy of the fields input address table in the output feature class.</bullet_item>
							<bullet_item>Checked—Creates a relationship class between the input address table and output feature class so that edits to the addresses in the input address table are automatically updated in the output feature class. This option is available only if the input address table and output feature class are in the same geodatabase workspace. <para>This option is available if you have  ArcEditor or ArcInfo licences.</para></bullet_item>
						</bulletList>
					</dialogReference></param></parameters><returnvalues></returnvalues><environments><environment name="Current_workspace" label="Current workspace">
						
					</environment><environment name="Output_Config_Keyword" label="Output Config Keyword">
						
					</environment><environment name="Output_coordinate_system" label="Output coordinate system"></environment><environment name="Scratch_workspace" label="Scratch workspace">
						
					</environment></environments><usage><bullet_item>
				<para>The output feature class is saved in the same spatial reference as the address locator. Changing the spatial reference of the output feature class is possible by setting a different  in the tool's . </para>
			</bullet_item><bullet_item><para>The output feature class, by default, stores a copy of input address and additional information such as score, status, and matched address of each record.  The addresses can be rematched either using the        tool or the  dialog box in ArcMap. Editing addresses in the input address table will not change the result in the output feature class once the matching process finishes and the feature class is created. </para>
			</bullet_item><bullet_item>
				<para>Set the Dynamic Output Feature Class parameter to true (checked) if you want the matching result in the output feature class to be  updated automatically when the input address table is updated. A relationship class is created for the input table and the output feature class. When an address in the input table is changed in an editing session in ArcMap, the address will be geocoded again immediately and the related record in the output feature class   will be updated with the new geocoding result. The automatic update is also supported for adding a new record or deleting an existing record in the input table.  
						<para>This option is only available if the input address table and output feature class are in the same geodatabase workspace. </para>
					</para>
				
					<para>This option is disabled if you are using an ArcView license, as relationship classes cannot be generated with an ArcView licence.</para>
				
			</bullet_item></usage><scriptExamples><scriptExample><title>GeocodeAddresses Example (Python Window)</title>
					<para>The following Python window script demonstrates how to use the GeocodeAddress function in immediate mode. </para>
				<code xml:space="preserve">
# Import system modules
import arcpy
from arcpy import env
env.workspace = "C:/ArcTutor/Geocoding/atlanta.gdb" 

# Set local variables:
address_table = "customers"
address_locator = "Atlanta_AddressLocator"
geocode_result = "geocode_result"

arcpy.GeocodeAddresses_geocoding(address_table, address_locator, "Address Address VISIBLE NONE;City CITY VISIBLE NONE;State State VISIBLE NONE;Zip Zip VISIBLE NONE", geocode_result, STATIC)
 

                    </code></scriptExample></scriptExamples></tool></metadata>