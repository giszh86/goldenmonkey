<?xml version="1.0"?><metadata><Esri><MetaID SYNC="true" /><CreaDate SYNC="true" /><CreaTime SYNC="true" /><SyncOnce SYNC="true">TRUE</SyncOnce><ModDate SYNC="true" /><ModTime SYNC="true" /></Esri><dataIdInfo><idCitation><resTitle sync="true">Create Domain (Data Management)</resTitle><citRespParty><rpIndName /><rpOrgName>ESRI, Inc.</rpOrgName><rpPosName /><rpCntInfo><cntAddress><delPoint>380 New York Street</delPoint><city>Redlands</city><adminArea>California</adminArea><postCode>92373 - 8100</postCode><eMailAdd>info@esri.com</eMailAdd><country>United States</country></cntAddress><cntPhone><voiceNum>909-793-2853</voiceNum><faxNum>909-793-5953</faxNum></cntPhone></rpCntInfo><role><RoleCd>010</RoleCd></role></citRespParty></idCitation><idAbs>
			<para>Creates an attribute domain in the specified workspace.</para>
		</idAbs><descKeys KeyTypCd="005"><keyTyp><keyTyp>005</keyTyp></keyTyp><keyword>Attribute</keyword><keyword>Constrain</keyword><keyword>Field</keyword><keyword>Integrity</keyword><keyword>Limit</keyword><keyword>Merge</keyword><keyword>Restrict</keyword><keyword>Set</keyword><keyword>Specify</keyword><keyword>Split</keyword><keyword>Subtype</keyword><keyword>Workspace</keyword></descKeys></dataIdInfo><distInfo><distributor><distorFormat><formatName sync="true">ArcToolBox Tool</formatName></distorFormat><distorTran><onLineSrc><linkage /><protocol /><onFunct><onFunctCd /></onFunct></onLineSrc></distorTran></distributor></distInfo><metainfo><metd Sync="TRUE" /></metainfo><mdDateSt Sync="TRUE" /><tool name="CreateDomain" displayname="Create Domain (Data Management)" toolboxalias="management" softwarerestriction="none"><summary>
			<para>Creates an attribute domain in the specified workspace.</para>
		</summary><alink_name>CreateDomain_management</alink_name><parameters><param sync="true" name="in_workspace" displayname="Input Workspace" datatype="Workspace" direction="Input" expression="in_workspace" type="Required"><pythonReference>
						<para>The geodatabase that will contain the new domain.</para>
					</pythonReference><dialogReference>
						<para>The geodatabase that will contain the new domain.</para>
					</dialogReference></param><param sync="true" name="domain_name" displayname="Domain Name" datatype="String" direction="Input" expression="domain_name" type="Required"><pythonReference>
						<para>The name of the domain that will be created.</para>
					</pythonReference><dialogReference>
						<para>The name of the domain that will be created.</para>
					</dialogReference></param><param sync="true" name="domain_description" displayname="Domain Description" datatype="String" direction="Input" expression="domain_description" type="Required"><pythonReference>
						<para>The description of the domain that will be created.</para>
					</pythonReference><dialogReference>
						<para>The description of the domain that will be created.</para>
					</dialogReference></param><param sync="true" name="field_type" displayname="Field Type" datatype="String" direction="Input" expression="field_type" type="Required"><pythonReference>
						<para>The type of attribute domain to create. Attribute domains are rules that describe the legal values of a field type. Specify a field type that matches the data type of the field to which the attribute domain will be assigned.</para>
						<bulletList><bullet_item>SHORT—Numeric values without fractional values within a specific range; coded values. </bullet_item><bullet_item>LONG—Numeric values without fractional values within a specific range. </bullet_item><bullet_item>FLOAT—Numeric values with fractional values within a specific range. </bullet_item><bullet_item>DOUBLE—Numeric values with fractional values within a specific range. </bullet_item><bullet_item>TEXT—Names or other textual qualities. </bullet_item><bullet_item>DATE—Date and/or time. </bullet_item></bulletList>
					</pythonReference><dialogReference>
						<para>The type of attribute domain to create. Attribute domains are rules that describe the legal values of a field type. Specify a field type that matches the data type of the field to which the attribute domain will be assigned.</para>
						<bulletList><bullet_item>SHORT—Numeric values without fractional values within a specific range; coded values. </bullet_item><bullet_item>LONG—Numeric values without fractional values within a specific range. </bullet_item><bullet_item>FLOAT—Numeric values with fractional values within a specific range. </bullet_item><bullet_item>DOUBLE—Numeric values with fractional values within a specific range. </bullet_item><bullet_item>TEXT—Names or other textual qualities. </bullet_item><bullet_item>DATE—Date and/or time. </bullet_item></bulletList>
					</dialogReference></param><param sync="true" name="domain_type" displayname="Domain Type" datatype="String" direction="Input" expression="domain_type" type="Optional"><pythonReference>
						<para>The domain type to create:</para>
						<bulletList><bullet_item>CODED—Specifies a valid set of values for an attribute. For example, a coded value domain might specify valid pipe material values: CL—cast iron pipe, DL—ductile iron pipe, or ACP—asbestos concrete pipe. </bullet_item><bullet_item>RANGE—Specifies a valid range of values for a numeric attribute. For example, if distribution water mains have a pressure between 50 and 75 psi, then a range domain would specify these minimum and maximum values. </bullet_item></bulletList>
					</pythonReference><dialogReference>
						<para>The domain type to create:</para>
						<bulletList><bullet_item>CODED—Specifies a valid set of values for an attribute. For example, a coded value domain might specify valid pipe material values: CL—cast iron pipe, DL—ductile iron pipe, or ACP—asbestos concrete pipe. </bullet_item><bullet_item>RANGE—Specifies a valid range of values for a numeric attribute. For example, if distribution water mains have a pressure between 50 and 75 psi, then a range domain would specify these minimum and maximum values. </bullet_item></bulletList>
					</dialogReference></param><param sync="true" name="split_policy" displayname="Split Policy" datatype="String" direction="Input" expression="split_policy" type="Optional"><pythonReference>
						<para>The split policy of the created domain. The behavior of an attribute's values when a feature that is split is controlled by its split policy.</para>
						<bulletList><bullet_item>DEFAULT—The attributes of the two resulting features take on the default value of the attribute of the given feature class or subtype. </bullet_item><bullet_item>DUPLICATE—The attribute of the two resulting features takes on a copy of the original object's attribute value. </bullet_item><bullet_item>GEOMETRY_RATIO—The attributes of resulting features are a ratio of the original feature's value. The ratio is based on the proportion into which the original geometry is divided. If the geometry is divided equally, each new feature's attribute gets one-half the value of the original object's attribute. The geometry ratio policy only applies to range domains. </bullet_item></bulletList>
					</pythonReference><dialogReference>
						<para>The split policy of the created domain. The behavior of an attribute's values when a feature that is split is controlled by its split policy.</para>
						<bulletList><bullet_item>DEFAULT—The attributes of the two resulting features take on the default value of the attribute of the given feature class or subtype. </bullet_item><bullet_item>DUPLICATE—The attribute of the two resulting features takes on a copy of the original object's attribute value. </bullet_item><bullet_item>GEOMETRY_RATIO—The attributes of resulting features are a ratio of the original feature's value. The ratio is based on the proportion into which the original geometry is divided. If the geometry is divided equally, each new feature's attribute gets one-half the value of the original object's attribute. The geometry ratio policy only applies to range domains. </bullet_item></bulletList>
					</dialogReference></param><param sync="true" name="merge_policy" displayname="Merge Policy" datatype="String" direction="Input" expression="merge_policy" type="Optional"><pythonReference>
						<para>The merge policy of the created domain. When two features are merged into a single feature, merge policies control attribute values in the new feature.</para>
						<bulletList><bullet_item>DEFAULT—The attribute of the resulting feature takes on the default value of the attribute of the given feature class or subtype. This is the only merge policy that applies to nonnumeric fields and coded value domains. </bullet_item><bullet_item>SUM_VALUES—The attribute of the resulting feature takes on the sum of the values from the original feature's attribute. The sum values policy only applies to range domains. </bullet_item><bullet_item>AREA_WEIGHTED—The attribute of the resulting feature is the weighted average of the attribute values of the original features. This average is based on the original feature's geometry. The area weighted policy only applies to range domains. </bullet_item></bulletList>
					</pythonReference><dialogReference>
						<para>The merge policy of the created domain. When two features are merged into a single feature, merge policies control attribute values in the new feature.</para>
						<bulletList><bullet_item>DEFAULT—The attribute of the resulting feature takes on the default value of the attribute of the given feature class or subtype. This is the only merge policy that applies to nonnumeric fields and coded value domains. </bullet_item><bullet_item>SUM_VALUES—The attribute of the resulting feature takes on the sum of the values from the original feature's attribute. The sum values policy only applies to range domains. </bullet_item><bullet_item>AREA_WEIGHTED—The attribute of the resulting feature is the weighted average of the attribute values of the original features. This average is based on the original feature's geometry. The area weighted policy only applies to range domains. </bullet_item></bulletList>
					</dialogReference></param></parameters><returnvalues></returnvalues><environments><environment name="Auto_commit" label="Auto commit">
						
					</environment><environment name="Current_workspace" label="Current workspace">
						
					</environment></environments><usage><bullet_item>
				<para>Domain management involves the following steps:</para>
				
					<bullet_item> Create the domain using the this tool.</bullet_item>
					<bullet_item>Add values to or set the range of values for the domain using the  tool or  tool.</bullet_item>
					<bullet_item>Associate the domain with a feature class using the  tool.</bullet_item>
				
			</bullet_item><bullet_item>
				<para>Coded value domains support only default value and duplicate split policies and default value merge policies.</para>
			</bullet_item><bullet_item>
				<para>Range domains support all split and merge policies. After a Split or Merge operation, the attribute values of output features are calculated based on the numeric values of the input features and the specified split or merge policy.</para>
			</bullet_item><bullet_item>
				<para>Workspace domains can also be managed in ArcCatalog or the Catalog window. Domains can be created and modified through the Domains tab on the Database Properties dialog box.</para>
			</bullet_item></usage><scriptExamples><scriptExample><title>Create Domain Example (Python Window)</title>
					<para>The following Python window script demonstrates how to use the CreateDomain function in immediate mode.</para>
				<code xml:space="preserve">import arcpy
from arcpy import env
env.workspace = "C:/data"
arcpy.CreateDomain_management("montgomery.gdb", "Materials", "Valid pipe materials", "TEXT", "CODED")
                    </code></scriptExample><scriptExample><title>Create Domain Example 2 (Stand-alone Script)</title>
					<para>This stand-alone script utilized the CreateDomain function as part of a workflow to create an attribute domain, assign values to it, and assign the domain to a field in a feature class.</para>
				<code xml:space="preserve"># Name: MakeDomain.py
# Description: Create an attribute domain to constrain pipe material values
# Author: ESRI
 
#Import system modules
import arcpy
from arcpy import env
 
try:
    # Set the workspace (to avoid having to type in the full path to the data every time)
    env.workspace = "C:/data"
 
    # Set local parameters
    domName = "Material4"
    gdb = "montgomery.gdb"
    inFeatures = "Montgomery.gdb/Water/Distribmains"
    inField = "Material"
 
    # Process: Create the coded value domain
    arcpy.CreateDomain_management("montgomery.gdb", domName, "Valid pipe materials", "TEXT", "CODED")
    
    #Store all the domain values in a dictionary with the domain code as the "key" and the 
    #domain description as the "value" (domDict[code])
    domDict = {"CI":"Cast iron", "DI": "Ductile iron", "PVC": "PVC", \
                "ACP": "Asbestos concrete", "COP": "Copper"}
    
    # Process: Add valid material types to the domain
    #use a for loop to cycle through all the domain codes in the dictionary
    for code in domDict:        
        arcpy.AddCodedValueToDomain_management(gdb, domName, code, domDict[code])
    
    # Process: Constrain the material value of distribution mains
    arcpy.AssignDomainToField_management(inFeatures, inField, domName)
 
except Exception, e:
    # If an error occurred, print line number and error message
    import traceback, sys
    tb = sys.exc_info()[2]
    print "Line %i" % tb.tb_lineno
    print e.message
                    </code></scriptExample></scriptExamples></tool></metadata>