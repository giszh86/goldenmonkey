<?xml version="1.0"?><metadata><Esri><MetaID SYNC="true" /><CreaDate SYNC="true" /><CreaTime SYNC="true" /><SyncOnce SYNC="true">TRUE</SyncOnce><ModDate SYNC="true" /><ModTime SYNC="true" /></Esri><dataIdInfo><idCitation><resTitle sync="true">Make OD Cost Matrix Layer (Network Analyst)</resTitle><citRespParty><rpIndName /><rpOrgName>ESRI, Inc.</rpOrgName><rpPosName /><rpCntInfo><cntAddress><delPoint>380 New York Street</delPoint><city>Redlands</city><adminArea>California</adminArea><postCode>92373 - 8100</postCode><eMailAdd>info@esri.com</eMailAdd><country>United States</country></cntAddress><cntPhone><voiceNum>909-793-2853</voiceNum><faxNum>909-793-5953</faxNum></cntPhone></rpCntInfo><role><RoleCd>010</RoleCd></role></citRespParty></idCitation><idAbs>
			<para>Makes an origin–destination (OD) cost matrix network analysis layer and sets its analysis properties. An OD cost matrix analysis layer is useful for representing a matrix of costs going from a set of origin locations to a set of destination locations.</para>
		</idAbs><descKeys KeyTypCd="005"><keyTyp><keyTyp>005</keyTyp></keyTyp><keyword>Alter</keyword><keyword>Altered</keyword><keyword>Cost Matrix</keyword><keyword>Cost Matrix Layer</keyword><keyword>Layer</keyword><keyword>Matrix Layer</keyword><keyword>Navigation Properties</keyword><keyword>Network Analyst Layer</keyword><keyword>Od Cost</keyword><keyword>Od Cost Matrix</keyword><keyword>Od Cost Matrix Layer</keyword><keyword>Origin-Destination</keyword></descKeys></dataIdInfo><distInfo><distributor><distorFormat><formatName sync="true">ArcToolBox Tool</formatName></distorFormat><distorTran><onLineSrc><linkage /><protocol /><onFunct><onFunctCd /></onFunct></onLineSrc></distorTran></distributor></distInfo><metainfo><metd Sync="TRUE" /></metainfo><mdDateSt Sync="TRUE" /><tool name="MakeODCostMatrixLayer" displayname="Make OD Cost Matrix Layer (Network Analyst)" toolboxalias="na" softwarerestriction="none"><summary>
			<para>Makes an origin–destination (OD) cost matrix network analysis layer and sets its analysis properties. An OD cost matrix analysis layer is useful for representing a matrix of costs going from a set of origin locations to a set of destination locations.</para>
		</summary><alink_name>MakeODCostMatrixLayer_na</alink_name><parameters><param sync="true" name="in_network_dataset" displayname="Input analysis network" datatype="Network Dataset Layer" direction="Input" expression="in_network_dataset" type="Required"><pythonReference>
						<para>The network dataset on which the OD cost matrix analysis will be performed.</para>
					</pythonReference><dialogReference>
						<para>The network dataset on which the OD cost matrix analysis will be performed.</para>
					</dialogReference></param><param sync="true" name="out_network_analysis_layer" displayname="Output layer name" datatype="String" direction="Output" expression="out_network_analysis_layer" type="Required"><pythonReference>
						<para>Name of the OD cost matrix network analysis layer to create.</para>
					</pythonReference><dialogReference>
						<para>Name of the OD cost matrix network analysis layer to create.</para>
					</dialogReference></param><param sync="true" name="impedance_attribute" displayname="Impedance attribute" datatype="String" direction="Input" expression="impedance_attribute" type="Required"><pythonReference>
						<para>The cost attribute to be used as impedance in the analysis.</para>
					</pythonReference><dialogReference>
						<para>The cost attribute to be used as impedance in the analysis.</para>
					</dialogReference></param><param sync="true" name="default_cutoff" displayname="Default cutoff" datatype="Double" direction="Input" expression="default_cutoff" type="Optional"><pythonReference>
						<para>Default impedance value at which to cut off searching for destinations for a given origin. If the accumulated impedance becomes higher than the cutoff value, the traversal stops. The default can be overridden by specifying the cutoff value on the origins.</para>
					</pythonReference><dialogReference>
						<para>Default impedance value at which to cut off searching for destinations for a given origin. If the accumulated impedance becomes higher than the cutoff value, the traversal stops. The default can be overridden by specifying the cutoff value on the origins.</para>
					</dialogReference></param><param sync="true" name="default_number_destinations_to_find" displayname="Default number of destinations to find" datatype="Long" direction="Input" expression="default_number_destinations_to_find" type="Optional"><pythonReference>
						<para>Default number of destinations to find for each origin. The default can be overridden by specifying a value for the TargetDestinationCount property on the origins.</para>
					</pythonReference><dialogReference>
						<para>Default number of destinations to find for each origin. The default can be overridden by specifying a value for the TargetDestinationCount property on the origins.</para>
					</dialogReference></param><param sync="true" name="accumulate_attribute_name" displayname="Accumulators" datatype="String" direction="Input" expression="[accumulate_attribute_name,...]" type="Optional"><pythonReference>
						<para>List of cost attributes to be accumulated during analysis. These accumulation attributes are purely for reference; the solver only uses the cost attribute specified by the Impedance attribute parameter  to calculate the route.</para>
						<para>For each cost attribute that is accumulated, a Total_[Impedance] property is added to the routes that are output by the solver.</para>
					</pythonReference><dialogReference>
						<para>List of cost attributes to be accumulated during analysis. These accumulation attributes are purely for reference; the solver only uses the cost attribute specified by the Impedance attribute parameter  to calculate the route.</para>
						<para>For each cost attribute that is accumulated, a Total_[Impedance] property is added to the routes that are output by the solver.</para>
					</dialogReference></param><param sync="true" name="UTurn_policy" displayname="U-Turn policy" datatype="String" direction="Input" expression="UTurn_policy" type="Optional"><pythonReference>
						<para>Restrict or permit U-turns at junctions that could occur during network traversal between stops.</para>
						<bulletList><bullet_item>ALLOW_UTURNS—U-turns are permitted at junctions with any number of adjacent edges.</bullet_item><bullet_item>NO_UTURNS—U-turns are prohibited at all junctions. Note, however, that U-turns are still permitted at network locations even when this setting is chosen; however, you can set the individual network locations' CurbApproach property to prohibit U-turns.</bullet_item><bullet_item>ALLOW_DEAD_ENDS_ONLY—U-turns are prohibited at all junctions, except those that have only one adjacent edge (a dead end). </bullet_item><bullet_item>ALLOW_DEAD_ENDS_AND_INTERSECTIONS_ONLY—U-turns are prohibited at junctions where exactly two adjacent edges meet but are permitted at intersections (any junction with three or more adjacent edges) or dead ends. (junctions with exactly one adjacent edge) </bullet_item></bulletList>
					</pythonReference><dialogReference>
						<para>Restrict or permit U-turns at junctions that could occur during network traversal between stops.</para>
						<bulletList><bullet_item>ALLOW_UTURNS—U-turns are permitted at junctions with any number of adjacent edges.</bullet_item><bullet_item>NO_UTURNS—U-turns are prohibited at all junctions. Note, however, that U-turns are still permitted at network locations even when this setting is chosen; however, you can set the individual network locations' CurbApproach property to prohibit U-turns.</bullet_item><bullet_item>ALLOW_DEAD_ENDS_ONLY—U-turns are prohibited at all junctions, except those that have only one adjacent edge (a dead end). </bullet_item><bullet_item>ALLOW_DEAD_ENDS_AND_INTERSECTIONS_ONLY—U-turns are prohibited at junctions where exactly two adjacent edges meet but are permitted at intersections (any junction with three or more adjacent edges) or dead ends. (junctions with exactly one adjacent edge) </bullet_item></bulletList>
					</dialogReference></param><param sync="true" name="restriction_attribute_name" displayname="Restrictions" datatype="String" direction="Input" expression="[restriction_attribute_name,...]" type="Optional"><pythonReference>
						<para>List of restriction attributes to apply during the analysis.</para>
					</pythonReference><dialogReference>
						<para>List of restriction attributes to apply during the analysis.</para>
					</dialogReference></param><param sync="true" name="hierarchy" displayname="Use Hierarchy in analysis" datatype="Boolean" direction="Input" expression="hierarchy" type="Optional"><pythonReference>
						<bulletList><bullet_item>USE_HIERARCHY— Use the hierarchy attribute for the analysis. Using a hierarchy results in the solver preferring higher-order edges to lower-order edges. Hierarchical solves are faster, and they can be used to simulate the preference of a driver who chooses to travel on freeways over local roads when possible—even if that means a longer trip. This option is valid only if the input network dataset has a hierarchy attribute.</bullet_item><bullet_item>NO_HIERARCHY—Do not use the hierarchy attribute for the analysis. Not using a hierarchy yields an exact route for the network dataset.</bullet_item></bulletList>
						<para>The parameter is not used if a hierarchy attribute is not defined on the network dataset used to perform the analysis. In such cases, use "#" as the parameter value. </para></pythonReference><dialogReference>
						<bulletList>
							<bullet_item>Checked -- Use the hierarchy attribute for the analysis. Using a hierarchy results in the solver preferring higher-order edges to lower-order edges. Hierarchical solves are faster, and they can be used to simulate the preference of a driver who chooses to travel on freeways over local roads when possible—even if that means a longer trip. This option is enabled only if the input network dataset has a hierarchy attribute.</bullet_item>
							<bullet_item>Unchecked -- Do not use the hierarchy attribute for the analysis. Not using a hierarchy yields an exact route for the network dataset.</bullet_item>
						</bulletList>
						<para>The parameter is disabled if a hierarchy attribute is not defined on the network dataset used to perform the analysis.</para></dialogReference></param><param sync="true" name="hierarchy_settings" displayname="Hierarchy rank settings" datatype="Network Analyst Hierarchy Settings" direction="Input" expression="hierarchy_settings" type="Optional"><pythonReference>
						<para>
							
								<para>Prior to version 10, this parameter allowed you to change the hierarchy ranges for your analysis from the default hierarchy ranges established in the network dataset. At version 10, this parameter is no longer supported and should be specified as an empty string. If you wish to change the hierarchy ranges for your analysis, update the default hierarchy ranges in the network dataset.</para>
							
						</para>
					</pythonReference><dialogReference>
						<para>
							
								<para>Prior to version 10, this parameter allowed you to change the hierarchy ranges for your analysis from the default hierarchy ranges established in the network dataset. At version 10, this parameter is no longer supported. If you wish to change the hierarchy ranges for your analysis, update the default hierarchy ranges in the network dataset. </para>
							
						</para>
					</dialogReference></param><param sync="true" name="output_path_shape" displayname="Output path shape" datatype="String" direction="Input" expression="output_path_shape" type="Optional"><pythonReference>
						<bulletList><bullet_item>NO_LINES—No shape will be generated for the output routes. This is useful when you have large number of origins and destinations and are interested only in the OD cost matrix table (and not the output line shapes). </bullet_item><bullet_item>STRAIGHT_LINES—The output route shape will be a single straight line between each of the origin-destination pairs. </bullet_item></bulletList>
						<para>No matter which output shape type is chosen, the best route is always determined by the network impedance, never Euclidean distance. This means only the route shapes are different, not the underlying traversal of the network.</para>
					</pythonReference><dialogReference>
						<bulletList><bullet_item>NO_LINES—No shape will be generated for the output routes. This is useful when you have large number of origins and destinations and are interested only in the OD cost matrix table (and not the output line shapes). </bullet_item><bullet_item>STRAIGHT_LINES—The output route shape will be a single straight line between each of the origin-destination pairs. </bullet_item></bulletList>
						<para>No matter which output shape type is chosen, the best route is always determined by the network impedance, never Euclidean distance. This means only the route shapes are different, not the underlying traversal of the network.</para>
					</dialogReference></param></parameters><returnvalues></returnvalues><environments><environment name="Current_workspace" label="Current workspace">
						
					</environment></environments><usage><bullet_item><para>After creating the analysis layer with this tool, you can add network analysis objects to it using the  tool, solve the analysis using the  tool, and save the results on disk using  tool. </para></bullet_item><bullet_item>
				<para>When using this tool in geoprocessing models, if the model is run as a tool, the output network analysis layer must be made  a model parameter. Otherwise the output layer is not added to the table of contents in ArcMap.</para>
			</bullet_item></usage><scriptExamples><scriptExample><title>MakeODCostMatrixLayer example 1 (Python window)</title>
					<para>Execute the tool using only the required parameters</para>
				<code xml:space="preserve">import arcpy
arcpy.env.workspace = "C:/ArcTutor/Network Analyst/Tutorial/Paris.gdb"
arcpy.MakeODCostMatrixLayer_na("Transportation/ParisNet","DrivetimeCosts",
                               "Drivetime")

                    </code></scriptExample><scriptExample><title>MakeODCostMatrixLayer example 2 (Python window)</title>
					<para>Execute the tool using all parameters </para>
				<code xml:space="preserve">import arcpy
arcpy.env.workspace = "C:/ArcTutor/Network Analyst/Tutorial/Paris.gdb"
arcpy.MakeODCostMatrixLayer_na("Transportation/ParisNet","DrivetimeCosts",
                               "Drivetime",10,20,["Meters","Drivetime"],
                               "NO_UTURNS",["Oneway"],"USE_HIERARCHY","",
                               "NO_LINES")

                    </code></scriptExample><scriptExample><title>MakeODCostMatrixLayer example 3 (workflow)</title>
					<para>The following stand-alone Python script demonstrates how the MakeODCostMatrixLayer tool can be used to create an origin-destination cost matrix for delivery of goods from
the warehouses to all stores within a 10-minute drive time.
</para>
				<code xml:space="preserve"># Name: MakeODCostMatrixLayer_Workflow.py
# Description: Create an origin-destination cost matrix for delivery of goods 
#              from the warehouses to all stores within a 10-minute drive time 
#              and save the results to a layer file on disk. Such a matrix can   
#              be used as an input for logistics, delivery and routing analyses.
# Requirements: Network Analyst Extension 
# Author: ESRI

#Import system modules
import arcpy
from arcpy import env

try:
    #Check out the Network Analyst extension license
    arcpy.CheckOutExtension("Network")

    #Set environment settings
    env.workspace = "C:/data/Paris.gdb"
    env.overwriteOutput = True
    
    #Set local variables
    inNetworkDataset = "Transportation/ParisMultimodal_ND"
    outNALayer = "WarehouseToStoreDrivetimeMatrix"
    impedanceAttribute = "Drivetime"
    accumulateAttributeName = ["Meters"]
    inOrgins = "Analysis/Warehouses"
    inDestinations = "Analysis/Stores"
    fieldMappings = "Name NOM #"
    outLayerFile = "C:/data/output" + "/" + outNALayer + ".lyr"
    
    #Create a new OD Cost matrix layer. We wish to find all stores within a 10 
    #minute cutoff. Apart from finding the drive time to the stores, we also 
    #want to find the total distance. So we will accumulate the "Meters" 
    #impedance attribute.
    arcpy.MakeODCostMatrixLayer_na(inNetworkDataset, outNALayer, 
                                   impedanceAttribute, 10, "",
                                   accumulateAttributeName)
    
    #Load the warehouse locations as origins using a default field map that maps
    #the Name property using a name field from warehouse features.
    arcpy.AddLocations_na(outNALayer, "Origins", inOrgins, "","1000 Meters")
    
    #Load the store locations as destinations mapping the NOM field from stores
    #features as Name property
    arcpy.AddLocations_na(outNALayer, "Destinations", inDestinations, 
                          fieldMappings,"1000 Meters")
    
    #Solve the OD cost matrix layer
    arcpy.Solve_na(outNALayer)
    
    #Save the solved OD cost matrix layer as a layer file on disk with relative
    #paths
    arcpy.SaveToLayerFile_management(outNALayer,outLayerFile,"RELATIVE")
    
    print "Script completed successfully"

except Exception as e:
    # If an error occurred, print line number and error message
    import traceback, sys
    tb = sys.exc_info()[2]
    print "An error occured on line %i" % tb.tb_lineno
    print str(e)
                    </code></scriptExample></scriptExamples></tool></metadata>