<?xml version="1.0"?><metadata><Esri><MetaID SYNC="true" /><CreaDate SYNC="true" /><CreaTime SYNC="true" /><SyncOnce SYNC="true">TRUE</SyncOnce><ModDate SYNC="true" /><ModTime SYNC="true" /></Esri><dataIdInfo><idCitation><resTitle sync="true">Import From CAD (Conversion)</resTitle><citRespParty><rpIndName /><rpOrgName>ESRI, Inc.</rpOrgName><rpPosName /><rpCntInfo><cntAddress><delPoint>380 New York Street</delPoint><city>Redlands</city><adminArea>California</adminArea><postCode>92373 - 8100</postCode><eMailAdd>info@esri.com</eMailAdd><country>United States</country></cntAddress><cntPhone><voiceNum>909-793-2853</voiceNum><faxNum>909-793-5953</faxNum></cntPhone></rpCntInfo><role><RoleCd>010</RoleCd></role></citRespParty></idCitation><idAbs>
			
			<para>Converts a collection of CAD files into feature classes and data tables using a predefined and highly normalized schema for the purpose of further translation into GIS data.</para>
			<para>The output is stored in an interim staging geodatabase. The geodatabase can then be used, or further postprocessing can be performed.</para>
			
				<para>This is a deprecated tool. To learn more about how this tool works click here. This functionality has been replaced by CAD To Geodatabase. </para>
			
		</idAbs><descKeys KeyTypCd="005"><keyTyp><keyTyp>005</keyTyp></keyTyp><keyword></keyword></descKeys></dataIdInfo><distInfo><distributor><distorFormat><formatName sync="true">ArcToolBox Tool</formatName></distorFormat><distorTran><onLineSrc><linkage /><protocol /><onFunct><onFunctCd /></onFunct></onLineSrc></distorTran></distributor></distInfo><metainfo><metd Sync="TRUE" /></metainfo><mdDateSt Sync="TRUE" /><tool name="ImportCAD" displayname="Import From CAD (Conversion)" toolboxalias="conversion" softwarerestriction="none"><summary>
			
			<para>Converts a collection of CAD files into feature classes and data tables using a predefined and highly normalized schema for the purpose of further translation into GIS data.</para>
			<para>The output is stored in an interim staging geodatabase. The geodatabase can then be used, or further postprocessing can be performed.</para>
			
				<para>This is a deprecated tool. To learn more about how this tool works click here. This functionality has been replaced by CAD To Geodatabase. </para>
			
		</summary><alink_name>ImportCAD_conversion</alink_name><parameters><param sync="true" name="Input_Files" displayname="Input Files" datatype="CAD Drawing Dataset" direction="Input" expression="[Input_Files,...]" type="Required"><pythonReference>
						<para>The collection of CAD files to convert to geodatabase features.</para>
					</pythonReference><dialogReference>
						<para>The collection of CAD files to convert to geodatabase features.</para>
					</dialogReference></param><param sync="true" name="out_personal_gdb" displayname="Output Staging Geodatabase" datatype="Workspace" direction="Output" expression="out_personal_gdb" type="Required"><pythonReference>
						<para>The new output geodatabase where all the input CAD features are placed along with the accompanying tables. If you need joins of the tables or features, then postprocessing is required.</para>
					</pythonReference><dialogReference>
						<para>The new output geodatabase where all the input CAD features are placed along with the accompanying tables. If you need joins of the tables or features, then postprocessing is required.</para>
					</dialogReference></param><param sync="true" name="spatial_reference" displayname="Spatial Reference" datatype="Spatial Reference" direction="Input" expression="spatial_reference" type="Optional"><pythonReference>
						<para>The spatial reference to be applied to the Output Staging Geodatabase.</para>
					</pythonReference><dialogReference>
						<para>The spatial reference to be applied to the Output Staging Geodatabase.</para>
					</dialogReference></param><param sync="true" name="Explode_Complex" displayname="Explode Complex Objects" datatype="Boolean" direction="Input" expression="Explode_Complex" type="Optional"><pythonReference>
						<para>Specifies if block inserts in DWG or DXF and/or cells in DGN will create a feature for each constituent element in the complex object or just a single point feature at its defined insertion point.</para>
						<bulletList><bullet_item>DO_NOT_EXPLODE_COMPLEX—The tool processes each complex object as a single point feature. </bullet_item><bullet_item>EXPLODE_COMPLEX—The tool expands the geometry of complex objects into their subentities, which are then added to the appropriate feature classes in the output feature dataset. </bullet_item></bulletList>
					</pythonReference><dialogReference>
						<para>Specifies if block inserts in DWG or DXF and/or cells in DGN will create a feature for each constituent element in the complex object or just a single point feature at its defined insertion point.</para>
						<bulletList>
							<bullet_item>Checked—The tool expands the geometry of complex objects into their subentities, which are then added to the appropriate feature classes in the output feature dataset..</bullet_item>
							<bullet_item>Unchecked—The tool processes each complex object as a single point feature. </bullet_item>
						</bulletList>
					</dialogReference></param></parameters><returnvalues></returnvalues><environments><environment name="Current_workspace" label="Current workspace">
						
					</environment><environment name="Default_output_Z_value" label="Default output Z value">
						
					</environment><environment name="Output_Config_Keyword" label="Output Config Keyword">
						
					</environment><environment name="Output_M_domain" label="Output M domain">
						
					</environment><environment name="Output_XY_domain" label="Output XY domain">
						
					</environment><environment name="Output_Z_domain" label="Output Z domain">
						
					</environment><environment name="Output_coordinate_system" label="Output coordinate system">
						
					</environment><environment name="Output_extent" label="Output extent">
						
					</environment><environment name="Output_has_M_values" label="Output has M values">
						
					</environment><environment name="Output_spatial_grid_1_2_3" label="Output spatial grid 1 2 3">
						
					</environment><environment name="Output_spatial_grid_1_2_3" label="Output spatial grid 1 2 3">
						
					</environment><environment name="Output_spatial_grid_1_2_3" label="Output spatial grid 1 2 3">
						
					</environment><environment name="Scratch_workspace" label="Scratch workspace">
						
					</environment></environments><usage><bullet_item>
				<para>This tool will output a  (.GDB) by default, but will also output an  (.MDB) if the user defines the proper extension.</para>
			</bullet_item><bullet_item>
				<para>A fixed set of feature classes will be generated in the specified output feature dataset. These feature classes contain the geometry for the lines, areas, points, and document extent, and optionally, point feature classes can be generated for each unique block or cell name.</para>
			</bullet_item><bullet_item>
				<para>This tool creates a new geodatabase and will not append to an existing one.</para>
			</bullet_item><bullet_item>
				<para>Postprocessing will be required if you need to perform any joins of the data or relationships. The output is data from the CAD inputs and no relationships exist. Its flattened structure allows it to be put back together however you want.</para>
			</bullet_item><bullet_item>
				<para>The Input files parameter will allow the addition of different kinds of CAD data (DGN, DWG, DXF) in one operation.</para>
			</bullet_item><bullet_item>
				<para>CAD property tables are created in the output workspace. These normalized tables can be linked together using key fields, such as the EntID that is also found in the feature classes created by the Import CAD tool.</para>
			</bullet_item><bullet_item>
				<para>If a table in the output feature dataset or workspace has the same name as one created by ImportCAD, the table will be deleted and re-created.</para>
			</bullet_item><bullet_item>
				<para>The Import from CAD tool does not support the creation of annotation feature classes.</para>
			</bullet_item><bullet_item>
				<para>The CAD property tables can be accessed from the output workspace in a model or script using the  tool. Likewise, the feature classes generated from the CAD data can be accessed using the Select Data tool on the output feature dataset.</para>
			</bullet_item><bullet_item>
				<para>CAD text and attribute entities are converted to point features.</para>
			</bullet_item><bullet_item>
				<para>Import from CAD cannot output to an ArcSDE feature class; it will create a new personal geodatabase.</para>
			</bullet_item><bullet_item>
				<para>If you are going to copy the DocPath field in the CadDoc feature class or the TextMemo field in the TxtProp table from the staging geodatabase to a ArcSDE geodatabase, there are some limitations you need to be aware of. The DocPath field in the CadDoc feature class and the TextMemo field in the TxtProp table each have a memo field that is too long to fit in an ArcSDE geodatabase. For information about limitations of your ArcSDE geodatabases, see your system administrator. Portions of the information in these fields are duplicated in other fields. They have a shorter field length, so they can be moved to an ArcSDE geodatabase. The DocName field contains portions of the DocPath field, and the TextValue field contains portions of the TextMemo field.</para>
			</bullet_item><bullet_item>
				<para>This function is generally used in the process of translating CAD data to an existing geodatabase using a series of other geoprocessing functions in a script or ModelBuilder model and as such, the resulting data from this function is typically temporary.</para>
			</bullet_item><bullet_item>
				<para>Normalized tables are generated in the specified output workspace. These tables contain the tabular attributes of the layer properties, text properties, entity properties, block or cell attributes, and extended entity data or MSLink values.</para>
			</bullet_item><bullet_item>
				<para>If a projection file exists for the input CAD file it will automatically populate the spatial reference parameter with the projections information. If multiple CAD files are used as inputs the spatial reference will be taken from the first CAD file which has a projection file, in the input list.</para>
				
			</bullet_item><bullet_item>
				<para>When generating a default spatial reference for the staging geodatabase, you should always use the extent default model of the CAD file as the foundation. This means that if there are entities outside the extents of the default CAD field extents, they could be rejected. Be sure the model with the greatest extent is used as the default model in a DGN drawing. Only MicroStation version 8 supports the use of multiple models in a single design file.</para>
			</bullet_item><bullet_item>
				<para>If a DGN file has multiple models, be sure the first model has the largest domain. Import from CAD calculates the domain for the entire DGN file from the first model. If this is not the case, be sure to expand the domain in your first model to be large enough so all will fit.</para>
			</bullet_item><bullet_item>
				<para>If you use a PRJ file for the spatial reference parameter, be sure to set your x,y,z domain. If you do not set a domain, this could cause some features not to be imported if they fall outside the domain calculated on the fly.</para>
			</bullet_item><bullet_item>
				<para>If you need to convert CAD annotation to geodatabase annotation, there are specific tools for this, such as .</para>
			</bullet_item></usage><scriptExamples><scriptExample><title></title><code xml:space="preserve"># To create Points from the CAD block inserts.
 
# Create the Geoprocessor object
import arcgisscripting
gp = arcgisscripting.create()
 
# Script arguments...
blocks = sys.argv[1]
if blocks == '#':
    blocks = "C:/Test_data/CAD/MetroGAS/res00051_pc22j_ImportCAD1.mdb/blocks"
    # provide a default value if unspecified
    res00051_pc22j_dwg = sys.argv[2]
 
if res00051_pc22j_dwg == '#':
    res00051_pc22j_dwg = "C:/Test_data/CAD/MetroGAS/res00051_pc22j.dwg"
 
# provide a default value if unspecified
Select_Set_Name = sys.argv[3]
if Select_Set_Name == '#':
    Select_Set_Name = "[SetName] = 'COD_90_50M'"
 
# Local variables...
Pivoted_AttrTags_by_OwnerID = "C:/Test_data/CAD/MetroGAS/res00051_pc22j_ImportCAD1.mdb/Attrib_PivotTable"
Attrib_Table = "C:/Test_data/CAD/MetroGAS/res00051_pc22j_ImportCAD1.mdb/Attrib"
Entities_Table = "C:/Test_data/CAD/MetroGAS/res00051_pc22j_ImportCAD1.mdb/Entity"
joined = "joined"
Output_Staging_Geodatabase = "C:/Test_data/CAD/MetroGAS/res00051_pc22j_ImportCAD1.mdb"
points_new2 = "points_new"
Point = "C:/Test_data/CAD/MetroGAS/res00051_pc22j_ImportCAD1.mdb/CADStaging/Point"
points_new = "points_new"
points_new3 = "points_new"
  
try:
    # Process: Import from
    CAD...gp.ImportCAD_conversion("'C:/Test_data/CAD/MetroGAS/res00051_pc22j.dwg'", Output_Staging_Geodatabase, "", "Do_Not_Explode_Complex")
 
    # Process: Select Data...
    gp.SelectData_management(Output_Staging_Geodatabase, "CADStaging/Point", )
 
    # Process: Make Layer...
    gp.MakeFeatureLayer_management(Point, points_new, "", "", "EntID EntID VISIBLE")
     
    # Process: Select Data (Entities Table)...
    gp.SelectData_management(Output_Staging_Geodatabase, "Entity", )
 
    # Process: Add Join...
    gp.AddJoin_management(points_new, "EntID", Entities_Table, "EntID", "OUTER", )
 
    # Process: Select Data (Attrib Table)...
    gp.SelectData_management(Output_Staging_Geodatabase, "Attrib", )
 
    # Process: Make Table View...
    gp.MakeTableView_management(Attrib_Table, joined, Select_Set_Name, "", "EntID EntID VISIBLE;OwnerID OwnerID VISIBLE;AttrFlag AttrFlag VISIBLE;MSSet MSSet VISIBLE;AtrTag AtrTag VISIBLE;AtrHndl AtrHndl VISIBLE;AttrType AttrType VISIBLE;AttrStr AttrStr VISIBLE;AttrLong AttrLong VISIBLE;AttrDbl AttrDbl VISIBLE")
 
    # Process: Pivot Table...
    gp.PivotTable_management(joined, "'Attrib.OwnerID';'OwnerID'", "AttrTag", "AttrStr", Pivoted_AttrTags_by_OwnerID)
      
    # Process: Add Join2...
    gp.AddJoin_management(points_new2, "Point.EntID", Pivoted_AttrTags_by_OwnerID, "OwnerID", "INNER", )
     
    # Process: Copy Features...
    gp.CopyFeatures_management(points_new3, blocks, "", "0", "0", "0")
    
except:
    # If an error occurred while running a tool print the messages
    print gp.GetMessages()
 
                    </code></scriptExample></scriptExamples></tool></metadata>